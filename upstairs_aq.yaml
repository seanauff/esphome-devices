substitutions:
  name: upstairs_aq

globals:
# to convert CPM to uSv/hr (data from here: https://cdn.sparkfun.com/assets/learn_tutorials/1/4/3/GeigerCounterType5_Certification_VSL_cert_3320408.pdf)
   - id: conv_factor 
     type: float
     restore_value: no
     initial_value: '0.0725'

esphome:
  name: ${name}
  platform: ESP8266
  board: nodemcuv2

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml

i2c:
  sda: D2
  scl: D1
  scan: true
  #id: bus_a

# NodeMCU onboard LED
output:
  - platform: gpio
    pin:
      number: D4
      inverted: true
      mode: OUTPUT
    id: gpio_d4

sensor:

##### Pocket Geiger Radiation Sensor - Type 5 #####
# Radiation pulse input using pulse counter (https://esphome.io/components/sensor/pulse_counter.html)
  - platform: pulse_counter
    pin:
      number: D5
      mode:
        input: true
        pullup: true
    name: "${name} Radiation CPM"
    id: "${name}_radiation_cpm"
    unit_of_measurement: "cpm"
    icon: "mdi:radioactive"
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 200us
    update_interval: 120s
    accuracy_decimals: 1
    total:
      name: "${name} Total Radiation Counts"
      id: "${name}_total_radiation_counts"
      unit_of_measurement: "counts"
      icon: "mdi:radioactive"
      accuracy_decimals: 0

# Radiation pulse input using pulse meter (https://esphome.io/components/sensor/pulse_meter.html)
  - platform: pulse_meter
    pin:
      number: D7
      mode:
        input: true
        pullup: true
    name: "${name} Radiation CPM meter"
    id: "${name}_radiation_cpm_meter"
    unit_of_measurement: "cpm"
    icon: "mdi:radioactive"
    internal_filter: 200us
    accuracy_decimals: 1
    timeout: 1 min
    filters:
      # moving median filter to smooth the random nature of detected events (note: using average will artificially increase cpm)
      - median:
          window_size: 10
          send_every: 10
          send_first_at: 10
    on_raw_value: # blink onboard LED whenever a pulse is detected
      then:
        - output.turn_on: gpio_d4
        - delay: 50ms
        - output.turn_off: gpio_d4
    total:
      name: "${name} Total Radiation Counts meter"
      id: "${name}_total_radiation_counts_meter"
      unit_of_measurement: "counts"
      icon: "mdi:radioactive"
      accuracy_decimals: 0

# Calculate dose rate (µS/hr) from CPM
  - platform: template
    name: "${name} Radiation Dose Rate"
    unit_of_measurement: "µS/hr"
    icon: "mdi:radioactive"
    accuracy_decimals: 2
    lambda: |-
      return id(${name}_radiation_cpm).state * id(conv_factor);

# Calculate long term CPM (since boot) from total counts and uptime
  - platform: template
    name: "${name} Long Term Radiation CPM"
    id: "${name}_long_term_radiation_cpm"
    unit_of_measurement: "cpm"
    icon: "mdi:radioactive"
    accuracy_decimals: 2
    lambda: |-
      return id(${name}_total_radiation_counts).state / id(${name}_uptime).state * 60.0;

# Calculate long term dose rate (since boot) from previous template sensor
  - platform: template
    name: "${name} Long Term Radiation Dose Rate"
    unit_of_measurement: "µS/hr"
    icon: "mdi:radioactive"
    accuracy_decimals: 3
    lambda: |-
      return id(${name}_long_term_radiation_cpm).state * id(conv_factor);

# Noise pulse input
  - platform: pulse_counter
    pin:
      number: D6
      mode:
        input: true
        pullup: true
    name: "${name} Noise CPM"
    id: "${name}_noise_cpm"
    unit_of_measurement: "cpm"
    icon: "mdi:bell-alert"
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    #internal_filter: 13us
    update_interval: 60s
    accuracy_decimals: 1
    total:
      name: "${name} Total Noise Counts"
      unit_of_measurement: "counts"
      icon: "mdi:bell-alert"
      accuracy_decimals: 0

##### SCD30 CO2 sensor #####
  - platform: scd30
    co2:
      name: "${name} NDIR CO2"
      accuracy_decimals: 0
    temperature:
      name: "${name} Temperature"
      id: "${name}_temperature"
      accuracy_decimals: 1
    humidity:
      name: "${name} Humidity"
      id: "${name}_humidity"
      accuracy_decimals: 0
    #temperature_offset: 1.5 °C
    automatic_self_calibration: true
    #ambient_pressure_compensation: 800mbar
    altitude_compensation: 1829m
    address: 0x61
    update_interval: 60s

##### Particulate Matter Sensor - SPS30 #####
  - platform: sps30
    pm_1_0:
      name: "${name} PM <1µm Mass concentration"
      id: "${name}_PM_1_0"
    pm_2_5:
      name: "${name} PM <2.5µm Mass concentration"
      id: "${name}_PM_2_5"
    pm_4_0:
      name: "${name} PM <4µm Mass concentration"
      id: "${name}_PM_4_0"
    pm_10_0:
      name: "${name} PM <10µm Mass concentration"
      id: "${name}_PM_10_0"
    pmc_0_5:
      name: "${name} PM <0.5µm Number concentration"
      id: "${name}_PMC_0_5"
    pmc_1_0:
      name: "${name} PM <1µm Number concentration"
      id: "${name}_PMC_1_0"
    pmc_2_5:
      name: "${name} PM <2.5µm Number concentration"
      id: "${name}_PMC_2_5"
    pmc_4_0:
      name: "${name} PM <4µm Number concentration"
      id: "${name}_PMC_4_0"
    pmc_10_0:
      name: "${name} PM <10µm Number concentration"
      id: "${name}_PMC_10_0"
    address: 0x69
    update_interval: 60s

##### CCS811 TVOC sensor #####
  - platform: ccs811
    eco2:
      name: "${name} eCO2"
    tvoc:
      name: "${name} TVOC"
    address: 0x5A
    temperature: "${name}_temperature"
    humidity: "${name}_humidity"
    update_interval: 60s